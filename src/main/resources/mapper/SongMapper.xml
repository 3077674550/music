<!DOCTYPE mapper PUBLIC
        "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.javaclimb.music.dao.SongMapper">
    <resultMap id="BaseResultMap" type="com.javaclimb.music.domain.Song" >
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="singer_id" jdbcType="INTEGER" property="singerId"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="pic" jdbcType="VARCHAR" property="pic"/>
        <result column="url" jdbcType="VARCHAR" property="url"/>
    </resultMap>

    <resultMap id="ResultMapWithBLOBs" type="com.javaclimb.music.domain.Song" extends="BaseResultMap">
        <result column="introduction" jdbcType="VARCHAR" property="introduction"/>
    </resultMap>

    <resultMap id="ResultMap_SongWithSinger" type="com.javaclimb.music.domain.SongWithSinger" >
        <id column="song_id" jdbcType="INTEGER" property="id"/>
        <result column="song_name" jdbcType="VARCHAR" property="name"/>
        <result column="song_create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="song_update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="song_pic" jdbcType="VARCHAR" property="pic"/>
        <result column="song_url" jdbcType="VARCHAR" property="url"/>
        <result column="introduction" jdbcType="VARCHAR" property="introduction"/>
        <result column="singer_id" jdbcType="INTEGER" property="singerId"/>
        <association property="singer" resultMap="SingerResultMap"/>
    </resultMap>

    <resultMap id="SingerResultMap" type="com.javaclimb.music.domain.Singer">
        <result column="singer_id" jdbcType="INTEGER" property="id"/>
        <result column="singer_name" jdbcType="VARCHAR" property="name"/>
        <result column="singer_sex" jdbcType="TINYINT" property="sex"/>
        <result column="singer_pic" jdbcType="VARCHAR" property="pic"/>
        <result column="singer_birthday" jdbcType="TIMESTAMP" property="birthday"/>
        <result column="singer_location" jdbcType="VARCHAR" property="location"/>
        <result column="singer_introduction" jdbcType="VARCHAR" property="introduction"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,singer_id,name,create_time,update_time,pic,url
    </sql>

    <sql id="Blob_Column_List">
        id,singer_id,name,create_time,update_time,pic,url,introduction
    </sql>

    <insert id="insert" parameterType="com.javaclimb.music.domain.Song">
        insert into song
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="singerId != null" >
                singer_id,
            </if>
            <if test="name != null" >
                name,
            </if>
            <if test="introduction != null" >
                introduction,
            </if>
            create_time,update_time,
            <if test="pic != null" >
                pic,
            </if>
            <if test="url != null" >
                url,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id},
            </if>
            <if test="singerId != null" >
                #{singerId},
            </if>
            <if test="name != null" >
                #{name},
            </if>
            <if test="introduction != null" >
                #{introduction},
            </if>
            now(),now(),
            <if test="pic != null" >
                #{pic},
            </if>
            <if test="url != null" >
                #{url},
            </if>
        </trim>
    </insert>

    <update id="update" parameterType="com.javaclimb.music.domain.Song">
        update song
        <set>
            <if test="singerId != null" >
                singer_id = #{singerId},
            </if>
            <if test="name != null" >
                name = #{name},
            </if>
            <if test="introduction != null" >
                introduction = #{introduction},
            </if>
            update_time = now(),
            <if test="pic != null" >
                pic = #{pic},
            </if>
            <if test="url != null" >
                url = #{url},
            </if>
        </set>
        where id = #{id}
    </update>

    <delete id="delete" parameterType="java.lang.Integer">
        delete from song
        where id=#{id};
    </delete>

    <select id="selectByPrimaryKey" resultMap="ResultMap_SongWithSinger" parameterType="java.lang.Integer">
        select
            song.id AS song_id,
            song.name AS song_name,
            song.introduction AS song_introduction,
            song.create_time AS song_create_time,
            song.update_time AS song_update_time,
            song.pic AS song_pic,
            song.url AS song_url,
            song.singer_id,
            (
                SELECT
                    CONCAT(
                        'singer_id:', singer.id,
                        'singer_name:', singer.name,
                        'singer_sex:', singer.sex,
                        'singer_pic:', singer.pic,
                        'singer_birthday:', singer.birthday,
                        'singer_location:', singer.location,
                        'singer_introduction:', singer.introduction
                    )
                FROM
                    singer
                WHERE
                    singer.id = song.singer_id
            ) AS singer_info
        from song
        where song.id=#{id}
    </select>

    <select id="selectPageSong" resultMap="ResultMapWithBLOBs" >
        select
        <include refid="Blob_Column_List"/>
        from song limit #{arg0},#{arg1}
    </select>

    <select id="songOfName" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String">
        select
        <include refid="Blob_Column_List"/>
        from song
        where name like #{name}
    </select>

    <select id="songOfSingerId" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        select
        <include refid="Blob_Column_List"/>
        from song
        where singer_id = #{singerId}
    </select>

</mapper>