<!DOCTYPE mapper PUBLIC
        "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.javaclimb.music.dao.ListSongMapper">
    <resultMap id="BaseResultMap" type="com.javaclimb.music.domain.ListSong" >
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="song_id" jdbcType="INTEGER" property="songId"/>
        <result column="song_list_id" jdbcType="INTEGER" property="songListId"/>
    </resultMap>

    <resultMap id="ResultMap_SongWithSinger" type="com.javaclimb.music.domain.SongWithSinger" >
        <id column="song_id" jdbcType="INTEGER" property="id"/>
        <result column="song_name" jdbcType="VARCHAR" property="name"/>
        <result column="song_create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="song_update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="song_pic" jdbcType="VARCHAR" property="pic"/>
        <result column="song_url" jdbcType="VARCHAR" property="url"/>
        <result column="introduction" jdbcType="VARCHAR" property="introduction"/>
        <result column="singer_id" jdbcType="INTEGER" property="singerId"/>
        <association property="singer" resultMap="SingerResultMap"/>
    </resultMap>

    <resultMap id="SingerResultMap" type="com.javaclimb.music.domain.Singer">
        <result column="singer_id" jdbcType="INTEGER" property="id"/>
        <result column="singer_name" jdbcType="VARCHAR" property="name"/>
        <result column="singer_sex" jdbcType="TINYINT" property="sex"/>
        <result column="singer_pic" jdbcType="VARCHAR" property="pic"/>
        <result column="singer_birthday" jdbcType="TIMESTAMP" property="birthday"/>
        <result column="singer_location" jdbcType="VARCHAR" property="location"/>
        <result column="singer_introduction" jdbcType="VARCHAR" property="introduction"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,song_id,song_list_id
    </sql>

    <insert id="insert" parameterType="com.javaclimb.music.domain.ListSong">
        insert into list_song
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="songId != null">
                song_id,
            </if>
            <if test="songListId != null">
                song_list_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id = #{id},
            </if>
            <if test="songId != null">
                song_id = #{songId},
            </if>
            <if test="songListId != null">
                song_list_id = #{songListId},
            </if>
        </trim>
    </insert>
    
    <update id="update" parameterType="com.javaclimb.music.domain.ListSong">
        update list_song
        <set>
            <if test="songId != null">
                song_id = #{songId},
            </if>
            <if test="songListId != null">
                song_list_id = #{songListId},
            </if>
        </set>
        where id = #{id}
    </update>

    <delete id="deleteSong" parameterType="com.javaclimb.music.domain.ListSong">
        delete from list_song
        where song_id = #{songId} AND song_list_id = #{songListId}
    </delete>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select *
        from list_song
        where id = #{id}
    </select>

    <select id="allListSong" resultMap="BaseResultMap">
        select *
        from list_song
    </select>

    <select id="selectSongBySongListId" resultMap="ResultMap_SongWithSinger" parameterType="java.lang.Integer">
        SELECT
            song.id AS song_id,
            song.name AS song_name,
            song.introduction AS song_introduction,
            song.create_time AS song_create_time,
            song.update_time AS song_update_time,
            song.pic AS song_pic,
            song.url AS song_url,
            song.singer_id,
            CONCAT(
                    'singer_id:', singer.id,
                    'singer_name:', singer.name,
                    'singer_sex:', singer.sex,
                    'singer_pic:', singer.pic,
                    'singer_birthday:', singer.birthday,
                    'singer_location:', singer.location,
                    'singer_introduction:', singer.introduction
            ) AS singer_info
        FROM
            song
                JOIN
            list_song ON song.id = list_song.song_id
                JOIN
            singer ON song.singer_id = singer.id
        WHERE
            list_song.song_list_id = #{songListId};
    </select>
</mapper>